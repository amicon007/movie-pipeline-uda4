name: backend_cd_pipeline


# Ensure the workflow runs manually and on push to the main branch
on:
  workflow_dispatch:
  push:
    branches: 
      - main

jobs:
  linting:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [latest]

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a python using the specified node version.

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Install the dependencies.
      - run: cd starter/backend && pip install pipenv && pipenv install --dev

      # Run the linter.
      - run: cd starter/backend && pipenv run lint

      # Send a console message at completion.
      - run: |
          echo "Hello ${{github.actor}}. Linting complete"

  testing:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [latest]

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a python environment using the specified node version.
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

       #Install the dependencies.
      - run: cd starter/backend && pip install pipenv && pipenv install

      # Run the tests.
      - run: cd starter/backend && pipenv run test

      # Send a console message at completion.
      - run: |
          echo "Hello ${{github.actor}}. Testing complete."

  deploy:
    needs: [linting, testing]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [latest]

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a python environment using the specified node version.
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Setup AWS
      - name: AWS configure credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1

      #Login to AWS ECR
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get ECR repository URI
        id: ecr
        run: |
          echo "REPOSITORY_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend" >> $GITHUB_ENV

      # Run docker build
      - run: |
          cd starter/backend && docker build -t backend:${GITHUB_SHA} .
          docker tag backend:${GITHUB_SHA} ${{ env.REPOSITORY_URI }}:${GITHUB_SHA}
          docker push ${{ env.REPOSITORY_URI }}:${GITHUB_SHA}

      - name: Logout of ECR
        run: docker logout ${{ env.REPOSITORY_URI }}

      # Setup and apply kubectl - Deploy

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name moviepipelinecluster --region us-east-1
       
      - name: Update kimage
        run: |

          cd ./starter/backend/k8s && kustomize edit set image backend=${{ env.REPOSITORY_URI }}:${GITHUB_SHA}

      - name: Apply kubectl
        run: |

         cd ./starter/backend/k8s && kustomize build | kubectl apply -f -


      # Send a console message at completion.
      - run: |
          echo "Hello ${{github.actor}}. You pushed to ${{github.repository}} at $(date). Build done"
          cd starter/backend/k8s && kubectl get svc -A

        
